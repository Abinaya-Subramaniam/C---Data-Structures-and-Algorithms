
class MergeSort {
    
    void merge(int arr[], int left, int mid, int right){
        int n1 = mid - left + 1;
        int n2 = right - mid;
        
        int L[] = new int [n1];
        int R[] = new int [n2];
        
        for(int i=0; i<n1;i++){
            L[i] = arr[left + i];
        }
        for(int j=0 ; j<n2 ; j++){
            R[j] = arr[mid + 1 + j];
        }
        
        int i=0, j=0;
        int k = left;
        
        while(i<n1 && j<n2){
            if(L[i] <= R[j]){
                arr[k] = L[i];
                i++;
            }
            else{
                arr[k] = R[j];
                j++;
            }
            k++;
        }
        
        while(i<n1){
            arr[k] = L[i];
            i++;
            k++;
        }
        
        while(j<n2){
            arr[k] = R[j];
            j++;
            k++;
        }
    }
    
    void merge_sort(int arr[], int left, int right){
        if(left<right){
        int mid = (left + right)/2;
        merge_sort(arr, left, mid);
        merge_sort(arr,mid+1, right);
        merge(arr,left,mid,right);
        }

    }
    
    static void printArray(int arr[]){
        for(int i =0 ; i<arr.length ; i++){
            System.out.println(arr[i]);
        }
        System.out.println();
    }
    
    public static void main(String[] args) {
        System.out.println("Merge Sort");
        int arr[] = {3,1,8,4,2,9,7,2};
        
        MergeSort ms = new MergeSort();
        ms.merge_sort(arr, 0, arr.length-1);
        printArray(arr);
    }
    
}
